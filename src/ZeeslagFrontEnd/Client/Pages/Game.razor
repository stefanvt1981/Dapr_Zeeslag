@page "/game" 
@using Microsoft.AspNetCore.WebUtilities
@using ZeeslagFrontEnd.Shared.Enums
@using ZeeslagFrontEnd.Shared.Grid;
@using ZeeslagFrontEnd.Shared.Records;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;

@inject NavigationManager Navigation
@inject HttpClient Http

@implements IAsyncDisposable

<h3>Game</h3> 
@{
    SetSize();
}
<table class="table-bordered">
    <tbody>     
        @for(int y = 0; y < _size; y++)
        {
            <tr id="row-@y">

                @for (int x = 0; x < _size; x++)
                {
                    var curX = x;
                    var curY = y;
                    <td id="cell-@x-@y" class="@_grid.Grid[x,y]" @onclick="e => CellClick(curX,curY)">X</td>
                }

            </tr>
        }
    </tbody>
</table>

@code {
    private int _size;
    private StyleGrid _grid;
    private HubConnection? _hubConnection;

    private string _playerName;
    private Difficulty _difficulty;

    private ZeeslagFrontEnd.Shared.Records.Game _game;

    private async Task CellClick(int x, int y)
    {
        await Http.PostAsJsonAsync<Shot>("shots/shoot", new Shot(_game.BoardId, new Point(x,y)));
        StateHasChanged();
    }

    private void SetSize()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("difficulty", out var difficulty))
        {
            _difficulty = Enum.Parse<Difficulty>(difficulty);
        }
        else
        {
            _difficulty = Difficulty.Easy;
        }

        _size = _difficulty switch
        {
            Difficulty.Easy => 10,
            Difficulty.Normal => 20,
            Difficulty.Hard => 30,
        };

        _grid = new StyleGrid(_size);
    }   

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        _hubConnection.On<Miss>("miss", (miss) =>
        {
            Console.WriteLine("Miss!!");
            StateHasChanged();
            _grid.SetMiss(miss.Point.X, miss.Point.Y);
            StateHasChanged();
        });

        _hubConnection.On<Hit>("hit", (hit) =>
        {            
            Console.WriteLine("Hitt!!");
            StateHasChanged();
            _grid.SetHit(hit.ImpactPoint.X, hit.ImpactPoint.Y);
            StateHasChanged();
        });

        _hubConnection.On<ShipDestruction>("destruction", (destruction) =>
        {            
            Navigation.NavigateTo("winner");
        });

        await _hubConnection.StartAsync();

        await StartGame();
    }

    private async Task StartGame()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("player", out var player))
        {
            _playerName = player;
        }
        else
        {
            _playerName = "Stefan";
        }

        var result = await Http.PostAsJsonAsync("game/start", new NewGame(_playerName, _difficulty));
        _game = await result.Content.ReadFromJsonAsync<ZeeslagFrontEnd.Shared.Records.Game>();
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
